#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <strings.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <errno.h>
#include <netdb.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/param.h>

#define MAXQUEUE      5   /* maximum number of pending connections */
#define PORTNUMBER 2225   /* arbitrary portnumber in range we may use */
#define MAXOUTPUT   500   /* outout buffer size */

static void print_ip_and_port(void);
static void clean_up(int);
static void set_up_server(void);
static void server_loop(void);
static void server_handler(void);

/* global variables so they are accessible in signalhandler */

static int serverFD = -1, clientFD = -1;  /* fd for server and client socket */


int main(int argc, char *argv[]) {

    
    set_up_server();

    print_ip_and_port();   /* inform user of where we are running */

    server_loop();

}


static void set_up_server(void) {
    struct sockaddr_in serverINETAdress;

    /*Creates socket to listen to in serverFD. Using ipv4 domain and 
     sequenced reliable connection with SOCK_STREAM over default TCP protocol (0)*/
    serverFD = socket(AF_INET, SOCK_STREAM, 0);

    /* initialize adresses of server. (Sets bytes to 0) */
    bzero((void *) &serverINETAdress, sizeof(serverINETAdress));

    /* Internet domain (Ipv4)*/
    serverINETAdress.sin_family = AF_INET;
    /* Accept connectionsfrom any IP adress */
    serverINETAdress.sin_addr.s_addr = htonl(INADDR_ANY);
    serverINETAdress.sin_port = htons((u_short)PORTNUMBER);
    /* set reuse address so you don't have to wait for the port to be free again */
    int on = 1;
    setsockopt(serverFD, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on));

    //Binds socket serverFD to serverINETadress
    bind(serverFD, (struct sockaddr*)&serverINETAdress, sizeof(serverINETAdress)); 
    //Goes in to passive state and listening on the socket. MaxQUEUE specified.
    listen(serverFD,MAXQUEUE);

}

static void server_loop(void) {
    for (;/* EVER */;) {
        struct sockaddr_in clientINETAdress;
        socklen_t clientLen = sizeof(clientINETAdress);
        
	/*Accept incoming connections */
	/*Accept will take the first pending connection from the queue and create         a new connected socket and returns a filedescriptor refering to that             socket (clientFD) */
	clientFD = accept(serverFD, (struct sockaddr*)&clientINETAdress,&clientLen); 
        fprintf(stdout, "connected clientFD %d from IPadress %s\n",
                clientFD, inet_ntoa(clientINETAdress.sin_addr));
        
        /* Create new child to deal with this connection */
        pid_t cpid = fork();
        if (cpid == 0) { // child
            serverFD = -1; // avoid cleaning this up
            server_handler(); //Handle the connection
            exit(0);
        } else { // parent
            clientFD = -1; // reset so it doesn't get closed twice
        }
    }
}

static void server_handler(void) {
    unsigned long bufferlen = 0;;
    for (;/* EVER */;) 
      {
	char *buffer = calloc(1,sizeof(int)); //Allocate buffers
        char *result = calloc(MAXOUTPUT,sizeof(char));
	 //Receive message length from client
	recv(clientFD,buffer,sizeof(int),0);
	bufferlen = buffer[0];
        fprintf(stdout, "reading %lu bytes\n", bufferlen);
        if (bufferlen > 0) {;;
	  char *msg = (char*) calloc(bufferlen,sizeof(char));
	  recv(clientFD,msg,bufferlen,0); //Receive the message
	if (strncmp(msg, "exit", 4) == 0)
	  {
            clean_up(0);
	    return;
	  }
	/*popen opens a process by creating a pipe, forking and invoking the              shell
	  Command parameter is the message receeived from client. "r" means                read. popen returns a stream that can be read. */
	FILE* file = popen(msg,"r");
	if(file == NULL)
	  {
	    printf("An error occured with popen() \n");
	  }
	//Reading the result from popen and sending data in chunks to client.
	  while(fgets(result,MAXOUTPUT,file) != NULL)
	    {
		int length[1];
		length[0] = strlen(result); //get the length
		//Send length to client
	        send(clientFD, (char*)length,sizeof(int),0);
		//Send result to client.
	        send(clientFD, result, strlen(result),0);
		result[0] = '\0';
	    }
	  int zero[1];
	  zero[0] = 0;
	  //Send bufferlength 0 to client, which means that we are done.
	  send(clientFD,(char*)zero,sizeof(int),0);
	  pclose(file); //close the stream
	  
	  //Free memory.
	    free(msg);
	    free(result);
	    free(buffer);
            bufferlen = 0; // reset bufferlen
        }
    }
}

static void print_ip_and_port(void) {
    char hostname[121];
    struct hostent *hostPtr;

    gethostname(hostname, 120);
    hostPtr = gethostbyname(hostname);

    printf("Server is running on\n%s (",
           hostname);
    if (hostPtr != NULL) {
        int i = 0;
        while (hostPtr->h_addr_list[i] != NULL) {
            struct sockaddr_in server;
            memcpy(&server.sin_addr, hostPtr->h_addr_list[0], hostPtr->h_length);
            printf(" %s ", inet_ntoa(server.sin_addr));
            i++;
        }
    }
    printf(") : %d\n", PORTNUMBER);
}

static void clean_up(int sign) {
    fprintf(stderr, "Server is shutting down....\n");
    if (serverFD != -1) {
        fprintf(stderr, "Closing serverFD %d\n", serverFD);
        close(serverFD);
    }
    if (clientFD != -1) {
        fprintf(stderr, "Closing clientFD %d\n", clientFD);
        close(clientFD);
    }
    _exit(0);
}
